sudo apt update
sudo apt --fix-broken install
sudo dpkg -i mysql-workbench-community_8.0.40-1ubuntu24.04_amd64.deb

sudo apt install software_name


##############################################################
###########   Data Transfer Local to Server   ################
##############################################################

scp -r /home/ubuntu/Downloads/scil/ {server ip or url}:/home/nazmul/frappe/frappe-bench/




##############################################################
###################   Python Environment   ###################
##############################################################
sudo apt update
sudo apt install python3 python3-venv python3-dev
    - this will install latest version of python3 like python-3.12.1
    
sudo apt install python3.9 python3.9-venv python3.9-dev
    - this will install specific python version python3.9
    - error? means: Default Ubuntu apt doesn't have multiple python repository
        - sudo add-apt-repository ppa:deadsnakes/ppa (Deadsnakes PPA will add multiple python repo version for Ubuntu apt)
        - sudo apt update (after add Deadsnakes must update apt)

python3 -m venv env
    - Create a virtual environment
    # Activate the virtual environment
        For bash or sh:
            source venv/bin/activate
        For zsh:
            source venv/bin/activate
        For fish:
            source venv/bin/activate.fish

# Install the package
pip install mysql-connector

# After you're done, deactivate the virtual environment
deactivate

# check is the python running from env
which python
    will return path of python running like '/home/nazmul/campusx/env/bin/python'


################################################################
############   Setup SSH access without password   #############
################################################################
dev@server:~$ ~/.ssh/
-bash: /home/dev/.ssh/: Is a directory
dev@server:~$ ls ~/.ssh/
authorized_keys  known_hosts  known_hosts.old
dev@server:~$ cat ~/.ssh/authorized_keys
dev@server:~$ ssh-keygen -t rsa
Generating public/private rsa key pair.
Enter file in which to save the key (/home/dev/.ssh/id_rsa): 
Enter passphrase (empty for no passphrase): 
Enter same passphrase again: 
Your identification has been saved in /home/dev/.ssh/id_rsa
Your public key has been saved in /home/dev/.ssh/id_rsa.pub
The key fingerprint is:
SHA256:chLye611wwOU1iKBNnJTsEtREJpEZXay25+6Qw7hoh0 dev@server
The key's randomart image is:
+---[RSA 3072]----+
|   .o.XB=        |
|   ..=** . o     |
|    ++=o. = .    |
|     +.= + .     |
|     .*.S .      |
|    E o=.o +     |
|   o o.+. = =    |
|  . .  .o+ . o   |
|        +o       |
+----[SHA256]-----+
dev@server:~$ ls ~/.ssh/
authorized_keys  id_rsa  id_rsa.pub  known_hosts  known_hosts.old
dev@server:~$ cat ~/.ssh/id_rsa.pub
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQDk+0PhJGswBzu+ZeHsV95bL80l+IVWShNLdxRVuF5FnutHy1+vwR7yF2yRfQwbEHJUZfjuFpGE0LFfPD/y8LRG7JQ6ZOqHRRx+3NEr8/wpltSWZg8FfUxwzciYkfaQIzMrCfb6OABuXHZwkLzWZbk83LBvjV+atH3tRKfk/rIaiHYiHk4bC/TRUCQWyIynSY4XtLsZCCHxpVqH3CVcqjbGadGdgmKmEspnDH17XXRde01OGDCPmw6LaWcfqRyhYACU8WhunhAp9Vene/i7+YTnxSHQ/iT1qRtLOnSyNt3Pa/nO4eHPZswLhhat6G2xB9L8RtPk+SIh3c+SCliw7fC9jSLipwAq1nho2vnjLt4Wfu+ePUq4e7+c9+KQYLY29r4O0EFnivPVmTmYQpzUn5V0h9ReDCztK2JknIOuZsLeudBEkKvHxtP1H9zAi3pdLPaFkU8IPorJUZwuk42KmozOq1hKSKG64fyTda1Qytq0Nu1oEvOasnxtmfeMohI8w/k= dev@server
dev@server:~$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.232.123.61
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/dev/.ssh/id_rsa.pub"
The authenticity of host '172.232.123.61 (172.232.123.61)' can't be established.
ED25519 key fingerprint is SHA256:SoFy/0c7lKEYvSVoAl4qarCSE3xRHFBGNFII7l/3CN8.
This host key is known by the following other names/addresses:
    ~/.ssh/known_hosts:1: [hashed name]
    ~/.ssh/known_hosts:7: [hashed name]
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
root@172.232.123.61's password: 

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'root@172.232.123.61'"
and check to make sure that only the key(s) you wanted were added.

dev@server:~$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.232.97.155
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/dev/.ssh/id_rsa.pub"
The authenticity of host '172.232.97.155 (172.232.97.155)' can't be established.
ED25519 key fingerprint is SHA256:ssZl07jKUi73EWimQ2Xp4/+SgHVttPD+/IKsiBTdMxY.
This host key is known by the following other names/addresses:
    ~/.ssh/known_hosts:3: [hashed name]
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
root@172.232.97.155's password: 

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'root@172.232.97.155'"
and check to make sure that only the key(s) you wanted were added.

dev@server:~$ ssh-copy-id -i ~/.ssh/id_rsa.pub root@172.232.97.116
/usr/bin/ssh-copy-id: INFO: Source of key(s) to be installed: "/home/dev/.ssh/id_rsa.pub"
The authenticity of host '172.232.97.116 (172.232.97.116)' can't be established.
ED25519 key fingerprint is SHA256:BQsSJ1Bq5h1sEufz/04vbKKeHtMdcTJPiWWzxsf7sA8.
This host key is known by the following other names/addresses:
    ~/.ssh/known_hosts:5: [hashed name]
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
/usr/bin/ssh-copy-id: INFO: attempting to log in with the new key(s), to filter out any that are already installed
/usr/bin/ssh-copy-id: INFO: 1 key(s) remain to be installed -- if you are prompted now it is to install the new keys
root@172.232.97.116's password: 

Number of key(s) added: 1

Now try logging into the machine, with:   "ssh 'root@172.232.97.116'"
and check to make sure that only the key(s) you wanted were added.

dev@server:~$ 




################################################################
###################   Unbuntu Server Setup   ###################
################################################################

Step 1 - Installing python and nginx
    sudo apt install python3-pip python3-dev nginx

Step 2 - Creating a python virtual environment
    sudo apt install virtualenv 
    /////// or ///////
    sudo pip3 install virtualenv

    Note: source env/bin/activate => To activate env

Step 3 - Installing Django and gunicorn
    pip install django gunicorn

Step 4 - Setting up our Django project
    mkdir projectdir
    cd projectdir
    django-admin startproject textutils ~/projectdir

    cd textutils
    sudo nano settings.py
    Edit: ALLOWED_HOSTS = ['*'] 

    sudo ufw allow 8000
        Note: need to allow port 8000 if not allowed

    ~/projectdir/manage.py runserver 0.0.0.0:8000
    ///// or /////
    python3 manage.py runserver 0.0.0.0:8000

Step 5 - Configuring gunicorn
    gunicorn --bind 0.0.0.0:8000 textutils.wsgi
        Note: To test gunicorn is working


    deactivate
        Note: deactivate env to configure gunicorn


    sudo vim /etc/systemd/system/gunicorn.socket
    ///// or /////
    sudo nano /etc/systemd/system/gunicorn.socket
    """
[Unit]
Description=gunicorn socket

[Socket]
ListenStream=/run/gunicorn.sock

[Install]
WantedBy=sockets.target
    """


    sudo vim /etc/systemd/system/gunicorn.service
    ///// or /////
    sudo nano /etc/systemd/system/gunicorn.service
    '''
[Unit]
Description=gunicorn daemon
Requires=gunicorn.socket
After=network.target

[Service]
User={{ubuntu_username}}
Group=www-data
WorkingDirectory=/home/{{ubuntu_username}}/projectdir
ExecStart=/home/{{ubuntu_username}}/projectdir/env/bin/gunicorn \
        --access-logfile - \
        --workers 3 \
        --bind unix:/run/gunicorn.sock \
        {{project_name}}.wsgi:application

Restart=always
RestartSec=10s

[Install]
WantedBy=multi-user.target
    '''
    sudo systemctl start gunicorn.socket
    sudo systemctl enable gunicorn.socket

Step 6 - Configuring Nginx as a reverse proxy
    sudo vim /etc/nginx/sites-available/textutils
    ///// or /////
    sudo nano /etc/nginx/sites-available/textutils
    '''
server {
    listen 80;
    server_name {{domain_name}};

    location = /favicon.ico { access_log off; log_not_found off; }
    location /static/ {
        root /home/{{ubuntu_username}}/projectdir;
    }

    location / {
        include proxy_params;
        proxy_pass {{http://unix:/run/gunicorn.sock}};
    }
}
    '''

    sudo ln -s /etc/nginx/sites-available/textutils /etc/nginx/sites-enabled/

    sudo nginx -t
        Note: To test nginx configuration is ok or not.


    sudo service gunicorn restart
    sudo service nginx restart



###################################################################
###################   Frappe Production Setup   ###################
###################################################################

Step 1️⃣  : Install ansible & nginx
    sudo apt install ansible nginx

Setp 2️⃣ : Enable Production Mode
    cd /home/youruser/frappe-bench
    sudo bench setup production {{ubuntu_username}}

Setp 3️⃣ : Setup Supervisor to Keep Bench Running
    sudo apt update
    sudo apt install supervisor -y

    sudo systemctl enable supervisor
    sudo systemctl start supervisor

3️⃣ Configure Nginx as Reverse Proxy
    sudo bench setup nginx

    sudo ln -s /etc/nginx/sites-available/frappe-bench /etc/nginx/sites-enabled/
    sudo systemctl restart nginx

    


###################################################################
######################   Add User in Ubuntu   #####################
###################################################################

Create a New User (If Not Already Created)
    adduser frappe
    Note: Password as you want ex. Nazmul3118@$#N
Give Sudo Access
    usermod -aG sudo frappe

change user to frappe
    su - frappe
