###############################################################
########################  Database  ###########################
###############################################################

CREATE DATABASE db_name
    - will create a database, & if same name db exists will raise an error

CREATE DATABASE IF NOT EXISTS db_name
    - will create a database, & if already exists no error 'STANDARD WAY'

DROP DATABASE db_name
    - will remove database, if db not exists will raise an error

DROP DATABASE IF EXISTS db_name
    - will remove database, if db not exists no error 'STANDARD WAY'

USE db_name;
	- to use this db














###############################################################
##########################  Table  ############################
###############################################################

CREATE TABLE IF NOT EXISTS db_name.users(
	user_id INTEGER,
  name VARCHAR(255),
  email VARCHAR(255),
  password VARCHAR(255)
)
    - creating a table


TRUNCATE TABLE campusx.users
    - to remove all records in the table (HIGHLY DANGER)
    - doesn't remove stracture of the table

DROP TABLE campusx.users
    - drop table and it's all records
    - remove stracture of the table

CREATE TABLE IF NOT EXISTS db_name.users(
	user_id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL UNIQUE,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL UNIQUE,
)
    - EASY WAY of creating Table
    - maybe can't change constraints without change table and data loss risk

CREATE TABLE IF NOT EXISTS db_name.users(
	user_id INTEGER NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  
  CONSTRAINT user_email_unique UNIQUE (name, email, password),
  CONSTRAINT user_pk PRIMARY KEY (name, user_id)
)
    - NOTE: using constraint. need when we want to unique combination name, email, passowrd (IMPORTANT)
    - can change constraints without change table or data loss


ALTER TABLE campusx.users ADD COLUMN password VARCHAR(255) NOT NULL
	- add extra column in existing table. will be add at the end

ALTER TABLE campusx.users ADD COLUMN password VARCHAR(255) NOT NULL AFTER name
	- will add the column after name column (BEFORE name / AFTER name)

ALTER TABLE campusx.users DROP COLUMN password
	- drop specific column

ALTER TABLE campusx.users MODIFY COLUMN password INTEGER
	- modify specific column

ALTER TABLE campusx.users ADD CONSTRAINT constraint_name CHECK (age > 18)
	- add constraint 

drop constraint (i will add the command later)
	- drop specific constraint

modify constraint
	- actually modify isn't possible directly, first drop existing constraint and add again










###############################################################
#######################  Functions  ###########################
###############################################################

NOTE: 2 types of functions
	1. Built-in Functions
		a. Scalar Func (like, round)
			- return a value for each value
		b. Aggregate Func (like, avg, sum, min, max)
			- run one time and return a value for all value
	2. User Defined Function


1. Aggregate Functions
AVG()			: Returns the average value of a numeric column.
COUNT()			: Returns the number of rows matching a condition.
SUM()			: Returns the sum of a numeric column.
MAX()			: Returns the maximum value in a column.
MIN()			: Returns the minimum value in a column.
GROUP_CONCAT()	: Concatenates values from a group.  (MySQL)
STRING_AGG()	: Concatenates values with a separator. (PostgreSQL)
VARIANCE() or VAR_POP(): Calculates the population variance.
VAR_SAMP()		: Calculates the sample variance.


2. String Functions
CONCAT()		: Concatenates two or more strings.
LOWER()			: Converts a string to lowercase.
UPPER()			: Converts a string to uppercase.
LENGTH() / LEN(): Returns the length of a string.
LEFT(), RIGHT()	: Extracts characters from the left or right of a string.
SUBSTRING()		: Extracts a substring from a string.
REPLACE()		: Replaces occurrences of a substring.
TRIM()			: Removes whitespace from both ends of a string.
LPAD(), RPAD()	: Pads a string to a specified length.
CHARINDEX() (SQL Server) / INSTR() (MySQL): Returns the position of a substring.

3. Date and Time Functions
NOW()						: Returns the current date and time.
CURDATE() / CURRENT_DATE()	: Returns the current date.
CURTIME() / CURRENT_TIME()	: Returns the current time.
DATE()						: Extracts the date part from a date or datetime.
TIME()						: Extracts the time part from a datetime.
YEAR(), MONTH(), DAY()		: Returns the year, month, or day.
HOUR(), MINUTE(), SECOND()	: Returns the hour, minute, or second.
DATEDIFF()					: Returns the difference in days between two dates.
DATEADD() (SQL Server)		: Adds an interval to a date.
DATE_TRUNC() (PostgreSQL)	: Truncates a date to the specified precision.


4. Mathematical Functions
ABS()				: Returns the absolute value of a number.
ROUND()				: Rounds a number to a specified number of decimal places.
CEIL() / CEILING()	: Returns the smallest integer greater than or equal to a number.
FLOOR()				: Returns the largest integer less than or equal to a number.
SQRT()				: Returns the square root of a number.
POWER()				: Raises a number to the power of another number.
MOD()				: Returns the remainder of a division.
RAND()				: Returns a random number between 0 and 1.
PI()				: Returns the value of pi.


5. Conditional Functions
CASE				: Conditional expression for if-else logic.
COALESCE()			: Returns the first non-null value in a list.
NULLIF()			: Returns NULL if two expressions are equal.
IFNULL() (MySQL)	: Returns a specified value if the expression is NULL.
IIF() (SQL Server)	: Inline if statement.


6. JSON Functions (Supported in MySQL, PostgreSQL, SQL Server)
JSON_EXTRACT() (MySQL) / -> operator (PostgreSQL): Extracts data from a JSON document.
JSON_OBJECT()			: Creates a JSON object.
JSON_ARRAY()			: Creates a JSON array.
JSON_CONTAINS()			: Checks if JSON contains a specific value.
JSONB_SET() (PostgreSQL): Updates a value within a JSONB document.


7. XML Functions (Supported in SQL Server, Oracle)
XMLQUERY()			: Executes an XQuery on XML data.
XMLELEMENT()		: Creates an XML element.
XMLSERIALIZE()		: Serializes an XML data type.


8. System Functions
VERSION()			: Returns the version of the database.
USER()				: Returns the current user.
DATABASE()			: Returns the current database name.
SESSION_USER()		: Returns the session user.


9. Encryption and Hashing Functions
MD5(), SHA1(), SHA256()					: Hashing functions.
AES_ENCRYPT() / AES_DECRYPT() (MySQL)	: Encryption and decryption functions.













###############################################################
#########################  Insert  ############################
###############################################################

INSERT INTO db_name.users VALUES
  ('nazmul@email.com', 'Nazmul', '123', '1'),
  ('a@email.com', 'a', '123', '2'),
  ('b@email.com', 'b', '123', '3'),
  ('c@email.com', 'c', '123', '4')
	- make sure data serial is matching with column serial


INSERT INTO
  db_name.users (`email`, `name`, `password`, `user_id`)
VALUES
  ('nazmul@email.com', 'Nazmul', '123', '1'),
  ('a@email.com', 'a', '123', '2'),
  ('b@email.com', 'b', '123', '3'),
  ('c@email.com', 'c', '123', '4')
    - update values (order should be accurate as column defined)













###############################################################
#########################  Retrive  ###########################
###############################################################

SELECT * FROM campusx.users
SELECT * FROM campusx.users WHERE 1
	- retrive all columns

SELECT DISTINCT(brand_name) AS 'BRANDS' FROM campusx.smartphones;
	- return unique values from a column

SELECT DISTINCT brand_name, processor_brand AS 'BRAND' FROM campusx.smartphones;
	- return unique combination of two column

SELECT * FROM campusx.smartphones WHERE brand_name = 'samsung';
SELECT * FROM campusx.smartphones WHERE price > 50000;
SELECT * FROM campusx.smartphones WHERE price > 10000 AND price < 50000
SELECT * FROM campusx.smartphones WHERE price BETWEEN 10000 AND 50000
SELECT * FROM campusx.smartphones WHERE processor_brand IN ('snapdragon', 'bionic', 'dimensity')
SELECT * FROM campusx.smartphones WHERE processor_brand NOT IN ('snapdragon', 'bionic', 'dimensity')
	- filter rows using where clause


NOTE: QUERY EXECUTION ORDER -> FROM, JOIN, WHERE, GROUP BY, HAVING, SELECT, DISTINCT, ORDER BY, LIMIT

WHERE - where works for select
GROUP BY
HAVING - works for group by
ORDER BY / Sorting
LIMIT












###############################################################
##########################  Update  ###########################
###############################################################

UPDATE campusx.smartphone SET processor_brand = 'dimensity' WHERE processor_brand = 'mediatek'
	- update any column value (NOTE: WHERE clause must, otherwise it will change all rows values)

UPDATE 
	campusx.users 
SET 
	email = 'nitish@email.com',
  	password = '12345'
WHERE 
	name = 'nitish'















###############################################################
##########################  Delete  ###########################
###############################################################

DELETE FROM campusx.smartphones WHERE primary_camera_rear > 150 AND brand_name = 'samsung'
	- delete specefic rows based on condition






###############################################################
###################  Constraints of DB  #######################
###############################################################

NOT NULL
    - this column can not be NULL

UNIQUE (combo)
    -> Another way of creating constraints
    - should be unique data in each row of this column, like email

PRIMARY KEY
    - only one column can be primary key, like roll number of students
    - automatically applied UNIQUE when PRIMARY KEY is given

AUTO_INCREMENT (MySQL) / SERIAL (PostgreSQL)
    - automatically increment value from last row value, like integer value

CHECK
    - check is a condition. like in age column only age allowed avobe 30 so, age > 30

DEFAULT
    - when no value given for this column, default value will be saved

FOREIGN KEY
    - relationship with another Table

INDEX

DATETIME

CURRENT_TIMESTAMP

###  REFERENTIAL ACTIONS ###
RESTRICT

CASCADE
	- in relations between 2 table, if mother table is deleted child table also delete

SET_NULL
	- in relations between 2 table, if mother table is deleted child table will keep but parent value will be NULL

SET DEFAULT














###############################################################
##########################  JOINS  ############################
###############################################################

INNER JOIN	: takes only matchig rows from both table
LEFT JOIN	: All rows from Left Table and only takes matchig rows from Right Table
RIGHT JOIN	: All rows from Right Table and only takes matching rows from Left Table
FULL JOIN	: LEFT JOIN UNION RIGHT JOIN
CROSS JOIN	: all possible combination (mostly not used)
SELF JOIN	: JOINING WITH SAME TABLE












###############################################################
########################  SET Operations  #####################
###############################################################

UNION		: WITHOUT DUPLICATES
UNION ALL	: WITH DUPLICATES
INTERSECT	: ONLY THOSE, WHOS ARE AVAILABLE IN BOTH
EXCEPT		: SUBTRACTS LAST TABLE FROM FIRST TABLE








###############################################################
########################  SUB Queries  ########################
###############################################################

3 type Sub Query based on Return
	1. Scalar Sub Query
		- return only one value like min/ max/ round/ 
	2. Row Sub Query
		- return multiple rows
	3. Table Sub Query
		- return a table with rows & column

2 type Sub Query based on Working
	1. Independent
		- can execute Indipendently
	2. Correlated
		- inner query depends on outer query

Sub Query used in:
	1. INSERT
	2. SELECT
		a. WHERE
		b. SELECT
		c. FROM
		d. HAVING
	3. UPDATE
	4. DELETE



###############  EXAMPLE OF SCALAR sub query & INDEPENDENT sub query  ##############

Q-1 : FIND OUT THE MOVIE WITH MAXIMUM SCORE RATING 

	SELECT * FROM campusx.movies ORDER BY score DESC LIMIT 1;
		- using simple order by and limit
	SELECT * FROM campusx.movies WHERE score = (SELECT max(SCORE) FROM campusx.movies)
		- using sub queries (inner query in outer query)


Q-2: FIND THE MOVIES WITH HEIGHT PROFIT (VS ORDER BY)

	USE campusx;
	SELECT * FROM movies ORDER BY (gross - budget) DESC LIMIT 1;
		- using simple order by and limit
	SELECT * FROM movies WHERE (gross - budget) = (SELECT MAX(gross - budget) FROM movies);
		- using sub queries (inner query in outer query)

Q-3: FIND HOW MANY MOVIES HAVE A RATING > THE AVG OF ALL THE MOVIES RATING & FIND COUNT ALL MOVIES HAVE RATING > AVG RATING OF ALL MOVIES
	USE campusx;
	SELECT * FROM movies WHERE score > (SELECT AVG(score) FROM movies);
	SELECT COUNT(*) FROM movies WHERE score > (SELECT AVG(score) FROM movies);

Q-4: FIND OUT MAX SCORE MOVIE RELEASED IN 2000
	USE campusx;
	SELECT * FROM movies WHERE year = 2000 AND score  = (SELECT MAX(score) FROM movies WHERE year = 2000);


###############  EXAMPLE OF ROWS sub query & INDEPENDENT sub query  ##############

Q-1: FIND OUT THE USERS WHO NEVER PLACED ANY ORDERS
	SELECT DISTINCT(user_id) FROM orders
		- step-1: getting all user_id who placed orders

	USE campusx;
	SELECT * FROM users WHERE user_id NOT IN (SELECT DISTINCT(user_id) FROM orders);

Q-2: FIND ALL THE MOVEIS MADE BY TOP 3 DIRECTORS (IN TERMS OF TOTAL GROSS INCOME)
	
	SELECT director, SUM(gross) FROM movies GROUP BY director
		- step-1: finding sum of gross profit for each director
	SELECT director, SUM(gross) FROM movies GROUP BY director ORDER BY SUM(gross) DESC LIMIT 3
		- step-2: finding highest 3

	USE campusx;
	SELECT * FROM movies WHERE director IN (SELECT director FROM movies GROUP BY director ORDER BY SUM(gross) DESC LIMIT 3)
		- ERROR: this version of MariaDB doesn't support LIMIT in inner/Sub Query

	USE campusx;
	WITH top_directors AS (SELECT director FROM movies GROUP BY director ORDER BY SUM(gross) DESC LIMIT 3)
	SELECT * FROM movies WHERE director IN (SELECT * FROM top_directors);


###############  EXAMPLE OF TABLE sub query & INDEPENDENT sub query  ##############

Q-1: FIND THE MOST PROFITABLE MOVIE EACH YEAR
	SELECT year, MAX(gross-budget) FROM movies ORDER BY year
		- step-1: query max profitable movie each ear
	
	USE campusx;
	SELECT * FROM movies WHERE (year, gross-budget) IN (SELECT year, MAX(gross-budget) FROM movies ORDER BY year);



###############  EXAMPLE OF CORRELATED sub query  ##############

Q-1: FIND ALL THE MOVIES THAT HAVE A RATING HIGHER THAN THE AVG RATING OF SAME GENRE.
		NOTE: genre means the category of the movies like, Action, Crime, Thriller, Fantasy etc.

	USE campusx;
	SELECT * FROM movies AS m1 WHERE score > (SELECT AVG(score) FROM movies AS m2 WHERE m2.genre = m1.genre)


Q-2: FIND OUT THE FAVORITE FOOD OF EACH CUSTOMER
	
	SELECT * FROM users AS u
		- first select all users

	SELECT * FROM users AS u
	JOIN orders AS o ON o.user_id = u.user_id
		- join with orders (User can order & user linked with order)

	SELECT * FROM users AS u
	JOIN orders AS o ON o.user_id = u.user_id
	JOIN order_details AS od ON od.order_id = o.order_id
		- join with order details (Orders linked with order_details)

	SELECT * FROM users AS u
	JOIN orders AS o ON o.user_id = u.user_id
	JOIN order_details AS od ON od.order_id = o.order_id
	JOIN food AS f ON f.f_id = od.f_id
		- join with food (order_details linked with food)

	SELECT name, f_name, Count(*) FROM users AS u
	JOIN orders AS o ON o.user_id = u.user_id
	JOIN order_details AS od ON od.order_id = o.order_id
	JOIN food AS f ON f.f_id = od.f_id
	GROUP BY o.user_id, od.f_id
		- checking which user order which food how many times



	USE campusx;
	WITH fav_food AS (
		SELECT o.user_id, name, f_name, Count(*) AS 'frequency' FROM users AS u
		JOIN orders AS o ON o.user_id = u.user_id
		JOIN order_details AS od ON od.order_id = o.order_id
		JOIN food AS f ON f.f_id = od.f_id
		GROUP BY o.user_id, od.f_id
	)
	
	SELECT * FROM fav_food AS t1 WHERE frequency = (SELECT MAX(frequency) FROM fav_food AS t2 WHERE t2.user_id = t1.user_id)











###############################################################
###################  Window Function  #########################
###############################################################

WINDOW FUNCTIONS
	1. OVER()
	2. RANK()  /  DENSE_RANK()  /  ROW_NUMBER()
	3. FIRST_VALUE()  /  LAST_VALUE()  /  NTH_VALUE()
	4. LAG()  / LEAD() -> Default 1 row before/after, LAG(Column_name, 7) -> nth row before/after
	5. Cumulative SUM
	6. Cumulative AVG
	7. Rolling Window -> Rolling Frame ( like, last 100 rows avg )
	8. Percent Change 
	9. Percentiles & Quantiles -> deciles(ten equal parts), quartiles(four equal parts), percentiles(100 equal parts) or any other number of interval
			- PERCENTILE_DISC
			- PERCENTILE_CONT
	10. OUTLINERS 
	11. NTILE() -> SEGMENTATION
			- Devide data set into equal dataset
				9   -> 3, 3, 3  devided equally
				10  -> 4, 3, 3  devided equally and last one set at first bucket
				11  -> 4, 4, 3  devided equally and remaining set at first bucket and second bucket
	12. CUME_DIST() -> Cumulative Distribution
	13. PARTITON IN MULTIPLE COLUMN


FRAMES
	1. ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW				: (default frame) frame includes all rows from the beginning of the partition up to and including the current row
	2. ROWS BETWEEN 1 PRECEDING AND 1 FOLLOWING						: current row and the row immediately before and after it.
	3. ROWS BETWEEN 3 PRECEDING AND 2 FOLLWOING						: frame includes all rows in the partition.
	4. ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING		: current row and the three rows before it and the two rows after it.

###############################   OVER()   #####################################

USE campusx;

SELECT AVG(marks) FROM student_marks
	- return only single row with avg marks (single value)

SELECT AVG(marks) OVER() FROM student_marks
	- return avg num of all rows, to all rows in the table (multiple rows value)
	- window func. OVER thinking that whole table is a window

SELECT *, AVG(marks) OVER(PARTITION BY branch) FROM student_marks
	- return all columes and avg markes on each branch
	- window made by branch 

NOTE: 'Window functions' is like 'GROUP BY'. but difference is 'GROUP BY' works on Rows but 'Window Function' works like by making separate window by data in the table


USE campusx;
SELECT *,
	AVG(marks) OVER() AS 'AVG in all student',
    MIN(marks) OVER() AS 'MIN in all student',
    MAX(marks) OVER() AS 'MAX in all student',
    MIN(marks) OVER(PARTITION BY branch) AS 'MIN in dept',
    MAX(marks) OVER(PARTITION BY branch) AS 'MAX in dept'
FROM student_marks
ORDER BY student_id


Q-1: FIND ALL THE STUDENTS WHO HAVE MARKS HIGHER THAT THE AVG MARKS OF THEIR RESPECTIVE BRANCH

	USE campusx;
	SELECT * 
	FROM (SELECT *, AVG(marks) OVER(PARTITION BY branch) AS 'branch_avg' FROM student_marks) AS t
	WHERE t.marks > t.branch_avg
	

##################  RANK()  /  DENSE_RANK()  /  ROW_NUMBER()  #####################

Q-2: FIND TOP 2 MOST PAYING CUSTOMERS OF EACH MONTH

	SELECT *,
	RANK() OVER(ORDER BY marks DESC)
	FROM student_marks
		- ranking students in whole window (whole table) by marks

	SELECT *,
	RANK() OVER(PARTITION BY branch ORDER BY marks DESC)
	FROM student_marks
		- ranking students in branch window by marks
		- if 2 students have same marks like 95 & 95 rank will be like 1  & 1 and next 3
	
	SELECT *,
	DENSE_RANK() OVER(PARTITION BY branch ORDER BY marks DESC)
	FROM student_marks
		- ranking students in branch window by marks
		- if 2 students have same marks like 95 & 95 rank will be like 1  & 1 and next 2

		MARKS => RANK()		-> DENSE_RANK()
		95	  => 1			-> 1
		95	  => 1			-> 1
		80	  => 3			-> 3

	SELECT *,
	ROW_NUMBER() OVER(PARTITION BY branch)
	FROM student_marks
		- basically assigning a row number to each row based on window
		Output:
			'7', 'Deepak',	'CSE', '98', '1'
			'5', 'Shubham',	'CSE', '78', '2'
			'8', 'Arpan',	'CSE', '95', '3'

	SELECT *,
	CONCAT(branch, '-', ROW_NUMBER() OVER(PARTITION BY branch))
	FROM student_marks
		Output:
			'7',  'Deepak',	'CSE', '98', 'CSE-1'
			'5', 'Shubham',	'CSE', '78', 'CSE-2'
			'8', 'Arpan',	'CSE', '95', 'CSE-3'
			'12', 'Rohit',	'ECE', '95', 'ECE-1'
			'10', 'Ankit',	'ECE', '88', 'ECE-2'
			'11', 'Anand',	'ECE', '81', 'ECE-3'
			'2', 'Rishabh',	'EEE', '91', 'EEE-1'
			'3', 'Anukant',	'EEE', '69', 'EEE-2'
			'1', 'Nitish',	'EEE', '82', 'EEE-3'


##################  FIRST_VALUE()  /  LAST_VALUE()  /  NTH_VALUE()  #####################

Q-1: FIND MAXIMUM marks AND ADD IN EACH ROW

	SELECT *,
	FIRST_VALUE(marks) OVER(ORDER BY marks DESC)
	FROM student_marks;

	OUTPUT:
		'7', 'Deepak',	'CSE', '98', '98'
		'8', 'Arpan',	'CSE', '95', '98'
		'2', 'Rishabh',	'EEE', '91', '98'
		'15', 'Sunny',	'MECH','39', '98'



Q-2: FIND MINIMUM marks AND ADD IN EACH ROW

	SELECT *,
	LAST_VALUE(marks) OVER(ORDER BY marks DESC)
	FROM student_marks;

	OUTPUT:
		'7', 'Deepak',	'CSE', '98', '98'
		'8', 'Arpan',	'CSE', '95', '95'
		'2', 'Rishabh',	'EEE', '91', '91'
		'15', 'Sunny',	'MECH','39', '39'
			- This is happen because of frame. here need first to last rows means 'ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING' this frame to get the last value


	SELECT *,
	LAST_VALUE(marks) OVER(ORDER BY marks DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
	FROM student_marks;

	OUTPUT:
		'7', 'Deepak',	'CSE', '98', '39'
		'8', 'Arpan',	'CSE', '95', '39'
		'2', 'Rishabh',	'EEE', '91', '39'
		'15', 'Sunny',	'MECH','39', '39'

Q-3: FIND OUT 2ND STUDENT IN EACH BRANCH

	SELECT *,
	NTH_VALUE(NAME, 2) OVER(PARTITION BY branch ORDER BY marks DESC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING)
	FROM student_marks;

	OUTPUT:
		'7',	'Deepak',	'CSE',	'98', 'Arpan'
		'8',	'Arpan',	'CSE',	'95', 'Arpan'
		'5',	'Shubham',	'CSE',	'78', 'Arpan'
		'6',	'Ved',		'CSE',	'43', 'Arpan'
		'9',	'Vinay',	'ECE',	'95', 'Rohit'
		'12',	'Rohit',	'ECE',	'95', 'Rohit'
		'10',	'Ankit',	'ECE',	'88', 'Rohit'
		'11',	'Anand',	'ECE',	'81', 'Rohit'
		'2',	'Rishabh',	'EEE',	'91', 'Nitish'
		'1',	'Nitish',	'EEE',	'82', 'Nitish'
		'3',	'Anukant',	'EEE',	'69', 'Nitish'
		'4',	'Rupesh',	'EEE',	'55', 'Nitish'
		'13',	'Prashant',	'MECH',	'75', 'Amit'
		'14',	'Amit',		'MECH',	'69', 'Amit'
		'16',	'Gautam',	'MECH',	'51', 'Amit'
		'15',	'Sunny',	'MECH',	'39', 'Amit'
			- if nth value doesn't exist then NULL value will set.




Q-4: FIND TOP 5 BATSMAN FROM EACH TEAM - best example of RANK()

	SELECT * FROM campusx.IPL_Ball_by_Ball_2008_2022;
		- all data

	SELECT 
		BattingTeam,
		batter
	FROM campusx.IPL_Ball_by_Ball_2008_2022
	GROUP BY BattingTeam, batter
		- grouping on team, batsman 


	SELECT 
		BattingTeam,
		batter,
		SUM(batsman_run) AS 'total_run',
		DENSE_RANK() OVER(PARTITION BY BattingTeam ORDER BY SUM(batsman_run) DESC) AS 'rank_with_team'
	FROM campusx.IPL_Ball_by_Ball_2008_2022
	GROUP BY BattingTeam, batter
		- adding column Sum(run) & Rank

	SELECT * 
	FROM (
		SELECT 
			BattingTeam,
			batter,
			SUM(batsman_run) AS 'total_run',
			DENSE_RANK() OVER(PARTITION BY BattingTeam ORDER BY SUM(batsman_run) DESC) AS 'rank_with_team'
		FROM campusx.IPL_Ball_by_Ball_2008_2022
		GROUP BY BattingTeam, batter) AS t
	WHERE t.rank_with_team < 6
	ORDER BY BattingTeam, rank_with_team
		- filter top 5 AND order by team and rank


###########################################   CUMULATIVE SUM   ##############################################


Q-5: FIND THE TOTAL RUNS IN 10th, 50th, 100th number Match in specific player => best example of Cumulative SUM

	SELECT * FROM campusx.IPL_Ball_by_Ball_2008_2022;
		- full table

	SELECT 
		CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID) AS CHAR)) AS 'match_no',
		SUM(batsman_run) AS 'runs_scored'
	FROM campusx.IPL_Ball_by_Ball_2008_2022
	WHERE batter = 'v kohli'
	GROUP BY ID
		- group by match_id & made a customer column using row number
		
	SELECT 
		CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID) AS CHAR)) AS 'match_no',
		SUM(batsman_run) AS 'runs_scored',
		SUM(SUM(batsman_run)) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 'career_runs'
	FROM campusx.IPL_Ball_by_Ball_2008_2022
	WHERE batter = 'v kohli'
	GROUP BY ID
		- calculated cumulative sum 

	SELECT * FROM (
		SELECT 
			CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID) AS CHAR)) AS 'match_no',
			SUM(batsman_run) AS 'runs_scored',
			SUM(SUM(batsman_run)) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 'career_runs'
		FROM campusx.IPL_Ball_by_Ball_2008_2022
		WHERE batter = 'v kohli'
		GROUP BY ID) AS t
	WHERE match_no = 'Match-10' OR match_no = 'Match-50' OR match_no = 'Match-100' OR match_no = 'Match-200'
		- retrive specific match result from sub query

		OUTPUT: 
		'Match-10',	 '3',  '117'
		'Match-50',  '11', '1131'
		'Match-100', '13', '2650'
		'Match-200', '41', '6334'


Q-6: FIND AVG RUNS OF VIRAT KOHLI USING CUMULATIVE AVG

	SELECT * FROM (
		SELECT 
			CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID) AS CHAR)) AS 'match_no',
			SUM(batsman_run) AS 'runs_scored',
			SUM(SUM(batsman_run)) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 'career_runs',
			AVG(SUM(batsman_run)) OVER(ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS 'career_runs'
		FROM campusx.IPL_Ball_by_Ball_2008_2022
		WHERE batter = 'v kohli'
		GROUP BY ID) AS t
			- calculating avg runs based on match
			
	SELECT * FROM (
		SELECT 
			CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID) AS CHAR)) AS 'match_no',
			SUM(batsman_run) AS 'runs_scored',
			SUM(SUM(batsman_run)) OVER w AS 'career_runs',
			AVG(SUM(batsman_run)) OVER w AS 'career_runs'
		FROM campusx.IPL_Ball_by_Ball_2008_2022
		WHERE batter = 'v kohli'
		GROUP BY ID
		WINDOW w as (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)) AS t
			- simplify window functions

			OUTPUT:
			# match_no	runs_scored	career_runs	Avg runs
			Match-1		1			1			1.0000
			Match-2		23			24			12.0000
			Match-3		13			37			12.3333


Q-7: FIND THE ROLLING AVG OF LAST 10 MATCH => EXAMPLE OF MOVING AVERAGE IN FX CHART LIKE 100 DAY MA

	SELECT 
		CONCAT('Match-', CAST(ROW_NUMBER() OVER(ORDER BY ID) AS CHAR)) AS 'match_no',
		SUM(batsman_run) AS 'runs_scored',
		SUM(SUM(batsman_run)) OVER w AS 'career_runs',
		AVG(SUM(batsman_run)) OVER w AS 'career_avg',
		AVG(SUM(batsman_run)) OVER(ROWS BETWEEN 9 PRECEDING AND CURRENT ROW) AS 'Rolling avg last 10 match'
	FROM campusx.IPL_Ball_by_Ball_2008_2022
	WHERE batter = 'v kohli'
	GROUP BY ID
	WINDOW w as (ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW)
		- calculating last 10 match run avg 
		- it is an example of current performance used in analytics and Most useful feature



Q-8: FIND OUT THE PERCENT OF CHANGE OF VIEWS MONTH OVER MONTH -> (BEST EXAMPLE OF LAG & PERCENT OF CHANGE)

	-- percent change = ((new_value - old_value)/ old_value)*100
	
	SELECT 
		YEAR(date) AS 'year', 
		MONTHNAME(date) AS 'month',
		SUM(views) AS 'total_views',
		(SUM(views) - LAG(SUM(views)) OVER(ORDER BY YEAR(date), MONTH(date)))/LAG(SUM(views)) OVER(ORDER BY YEAR(date), MONTH(date))*100 AS 'change_in_percent'
	FROM campusx.youtube
	GROUP BY YEAR(date), MONTH(date)

	OUTPUT:
		# year, 'month',  'total_views', 'change_in_percent'
		'2030', 'April',  '155113',      '-10.6353'
		'2030', 'May',    '163666',      '5.5140'
		'2030', 'June',   '133715',      '-18.3001'
		'2030', 'July',   '154930',      '15.8658'
		'2030', 'August', '162543',      '4.9138'



####################################   NTILE()   ####################################

Q-9: take all students and separte in 3 bucket by marks

	SELECT *,
		NTILE(3) OVER(ORDER BY marks DESC) AS 'buckets'
	FROM campusx.student_marks


Q-10: TAKE ALL SMARTPHONES AND DEVICE IN 3 CATEGORY PREMIUM, MID-RANGE, BUDGET PHONES => BEST EXAMPLE OF NTILE()

	SELECT brand, model, price,
	CASE
		WHEN bucket = 1 THEN 'budget'
		WHEN bucket = 2 THEN 'mid-range'
		WHEN bucket = 3 THEN 'premium'
	END AS 'phone_type'
	FROM (SELECT brand, model, price,
			NTILE(3) OVER(ORDER BY price) AS 'bucket'
	  	FROM campusx.smartphone) t

	output:
	# brand		model						price	phone_type
	Micromax	Micromax IN 2C				5999	budget
	Tecno		Tecno Spark Go 	2022		6249	budget
	Realme		Realme C30 (3GB RAM + 32GB)	6299	budget
	Samsung		Samsung Galaxy A50s			15990	mid-range
	Vivo		Vivo Y33T					15990	mid-range
	OPPO		OPPO A73					15990	mid-range
	Realme		Realme 10 Pro Plus 8/256	27999	premium
	OnePlus		OnePlus Nord 3 5G			27999	premium
	Honor		Honor X9a					27999	premium








#######################################################################
##########################  String in SQL  ############################
#######################################################################

Three TYPES OF DATABASE
	1. NUMERICAL
		- INTEGER
		- DECIMAL
	2. TEXT
		- CHAR
		- VARCHAR
		- TEXT
	3. TAMPARAL
		- DATE
		- TIME

STRING TYPES
1. CHAR			: char(10) -> will take defined space, if word is hello which is 5 but it will take 10 char space, specially used in Phone Number and abbr text
2. VARCHAR		: variable-length string, useful in users name
3. TEXT			: useful in blog post, comments etc.
4. MEDIUMTEXT	: useful in long-form articles, or legal documents
5. LONGTEXT		: useful in entire books or large amount of data


Wildcards
	1. like
		- percent %
		- underscore _

Q-1: FIND ALL BRANDS, WHERE BRAND NAME ARE 5 CHARACTERS ONLY.

	SELECT DISTINCT(brand)
	FROM smartphone
	WHERE brand LIKE '_____'
		- no matter what are the characters, but it should be in 5 character
	OUTPUT:
		'Apple'
		'Tecno'
		'iKall'
		'LeEco'
		'Honor'

	SELECT DISTINCT(brand)
	FROM smartphone
	WHERE brand LIKE 'A____'
		- should be in 5 character and starts with A
	OUTPUT:
		'Apple'

Q-2: FIND ALL BRAND, WHERE 'SAM' WORD IN BRAND NAME

	SELECT DISTINCT(brand)
	FROM smartphone
	WHERE brand LIKE '%sam%'
		- no matter how many char in start or end, if sam char in word > True
	OUTPUT:
		'Samsung'


	SELECT DISTINCT(brand)
	FROM smartphone
	WHERE brand LIKE 'sam%'
		- if the word starts with sam > True
	OUTPUT:
		'Samsung'


	SELECT DISTINCT(brand)
	FROM smartphone
	WHERE brand LIKE '%max'
		- if the words ends with max
	OUTPUT:
		'Micromax'


















