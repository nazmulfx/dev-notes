###############################################################
########################  Database  ###########################
###############################################################

CREATE DATABASE db_name
    - will create a database, & if same name db exists will raise an error

CREATE DATABASE IF NOT EXISTS db_name
    - will create a database, & if already exists no error 'STANDARD WAY'

DROP DATABASE db_name
    - will remove database, if db not exists will raise an error

DROP DATABASE IF EXISTS db_name
    - will remove database, if db not exists no error 'STANDARD WAY'


###############################################################
##########################  Update  ###########################
###############################################################

UPDATE campusx.smartphone SET processor_brand = 'dimensity' WHERE processor_brand = 'mediatek'
	- update any column value (NOTE: WHERE clause must, otherwise it will change all rows values)

UPDATE 
	campusx.users 
SET 
	email = 'nitish@email.com',
  	password = '12345'
WHERE 
	name = 'nitish'


###############################################################
#########################  Retrive  ###########################
###############################################################

SELECT * FROM campusx.users
SELECT * FROM campusx.users WHERE 1
	- retrive all columns

SELECT DISTINCT(brand_name) AS 'BRANDS' FROM campusx.smartphones;
	- return unique values from a column

SELECT DISTINCT brand_name, processor_brand AS 'BRAND' FROM campusx.smartphones;
	- return unique combination of two column

SELECT * FROM campusx.smartphones WHERE brand_name = 'samsung';
SELECT * FROM campusx.smartphones WHERE price > 50000;
SELECT * FROM campusx.smartphones WHERE price > 10000 AND price < 50000
SELECT * FROM campusx.smartphones WHERE price BETWEEN 10000 AND 50000
SELECT * FROM campusx.smartphones WHERE processor_brand IN ('snapdragon', 'bionic', 'dimensity')
SELECT * FROM campusx.smartphones WHERE processor_brand NOT IN ('snapdragon', 'bionic', 'dimensity')
	- filter rows using where clause


NOTE: QUERY EXECUTION ORDER -> FROM, JOIN, WHERE, GROUP BY, HAVING, SELECT, DISTINCT, ORDERBY




###############################################################
##########################  Table  ############################
###############################################################

CREATE TABLE IF NOT EXISTS db_name.users(
	user_id INTEGER,
  name VARCHAR(255),
  email VARCHAR(255),
  password VARCHAR(255)
)
    - creating a table


TRUNCATE TABLE campusx.users
    - to remove all records in the table (HIGHLY DANGER)
    - doesn't remove stracture of the table

DROP TABLE campusx.users
    - drop table and it's all records
    - remove stracture of the table



CREATE TABLE IF NOT EXISTS db_name.users(
	user_id INTEGER NOT NULL PRIMARY KEY AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL UNIQUE,
  email VARCHAR(255) NOT NULL UNIQUE,
  password VARCHAR(255) NOT NULL UNIQUE,
)
    - EASY WAY of creating Table
    - maybe can't change constraints without change table and data loss risk


CREATE TABLE IF NOT EXISTS db_name.users(
	user_id INTEGER NOT NULL AUTO_INCREMENT,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL,
  password VARCHAR(255) NOT NULL,
  
  CONSTRAINT user_email_unique UNIQUE (name, email, password),
  CONSTRAINT user_pk PRIMARY KEY (name, user_id)
)
    - NOTE: using constraint. need when we want to unique combination name, email, passowrd (IMPORTANT)
    - can change constraints without change table or data loss


ALTER TABLE campusx.users ADD COLUMN password VARCHAR(255) NOT NULL
	- add extra column in existing table. will be add at the end

ALTER TABLE campusx.users ADD COLUMN password VARCHAR(255) NOT NULL AFTER name
	- will add the column after name column (BEFORE name / AFTER name)

ALTER TABLE campusx.users DROP COLUMN password
	- drop specific column

ALTER TABLE campusx.users MODIFY COLUMN password INTEGER
	- modify specific column

ALTER TABLE campusx.users ADD CONSTRAINT constraint_name CHECK (age > 18)
	- add constraint 

drop constraint (i will add the command later)
	- drop specific constraint

modify constraint
	- actually modify isn't possible directly, first drop existing constraint and add again




###############################################################
#########################  Insert  ############################
###############################################################

INSERT INTO db_name.users VALUES
  ('nazmul@email.com', 'Nazmul', '123', '1'),
  ('a@email.com', 'a', '123', '2'),
  ('b@email.com', 'b', '123', '3'),
  ('c@email.com', 'c', '123', '4')
	- make sure data serial is matching with column serial


INSERT INTO
  db_name.users (`email`, `name`, `password`, `user_id`)
VALUES
  ('nazmul@email.com', 'Nazmul', '123', '1'),
  ('a@email.com', 'a', '123', '2'),
  ('b@email.com', 'b', '123', '3'),
  ('c@email.com', 'c', '123', '4')
    - update values (order should be accurate as column defined)


###############################################################
###################  Constraints of DB  #######################
###############################################################

NOT NuLL
    - this column can not be NULL

UNIQUE (combo)
    -> Another way of creating constraints
    - should be unique data in each row of this column, like email

PRIMARY KEY
    - only one column can be primary key, like roll number of students
    - automatically applied UNIQUE when PRIMARY KEY is given

AUTO INCREMENT
    - automatically increment value from last row value, like integer value

CHECK
    - check is a condition. like in age column only age allowed avobe 30 so, age > 30

DEFAULT
    - when no value given for this column, default value will be saved

FOREIGN KEY
    - relationship with another Table

DATETIME

CURRENT_TIMESTAMP

###  REFERENTIAL ACTIONS ###
RESTRICT

CASCADE
	- in relations between 2 table, if mother table is deleted child table also delete

SET_NULL
	- in relations between 2 table, if mother table is deleted child table will keep but parent value will be NULL

SET DEFAULT
