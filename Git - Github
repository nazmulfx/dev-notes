
git init
    - add .git in the folder

git branch
    - check current branch



############################################
########### push code to repo ##############
############################################

git push origin branch-name
    - push code to personal repository

git push upstream branch-name
    - push code to collaborative source

git status
    - current status of files

git add path/filename
    - add specific file

git add .
    - add all files and folder in one time

git reset filename
    - unstage files/ reset files to last stage

git restore filename
    - (use "git restore <file>..." to discard changes in working directory)

###############################################
############ Create & switch branch ###########
###############################################

git branch branch-name
    - Create a new branch

git checkout branch-name
    - switch to another branch
git switch branch-name
    - Alternatively, if you're using Git 2.23 or newer, you can also use git switch

git checkout -b branch-name
    - Alternatively, you can create and switch to the new branch immediately with


git checkout -b branch-name origin/branch-name
    - create and checkout a branch which already exists in the remote

git fetch origin

###########################################
################## Pull & Merge ###########
###########################################

git checkout -b version-15
    - create a branch and switch you want to pull 

git remote add origin https://github.com/your-username/your-repo.git
    - add remote to pull from the remote repo

git pull origin version-15
    - branch you want to pull

    - Merge                             : git pull origin develop --no-rebase     OR git config pull.rebase false
    - Rebase                            : git pull origin develop --rebase        OR git config pull.rebase true
    - fast-forward only                 : git pull origin develop --ff-only       OR git config pull.ff only
    - if any unrelated history fetal    : git pull origin develop --allow-unrelated-histories

git checkout update-by-nazmul
    - checkout back to update-by-nazmul

git merge version-15
    - merge version-15 with update-by-nazmul

git add <resolved-files>
    - Resolve any merge conflicts if they arise, and then add the resolved files

git commit -m "Merged version-15 into update-by-nazmul"
    - commit

git push upstream update-by-nazmul
#or 
git push origin update-by-nazmul

################################
########### Remote #############
################################

git remote -v
    - check fetch/push repo link 


git remote add origin repo_link.git
    - to Add remote repo

git remote set-url origin git@github-nazmul:nazmulfx/library_management.git
    - if remote already exists then set-url again



###########################################
################## GIT SSH ################
###########################################

https://chatgpt.com/c/67429e37-a9b0-800c-80c4-e76811c54cc4







Yes, you can use both GitHub accounts on the same computer. Here's how you can configure it:

---

### **1. Set Up SSH Keys for Each Account**

1. **Generate SSH Key for Personal Account**
   ssh-keygen -t ed25519 -C "your_personal_email@example.com"
    - Save the key with a custom name, e.g., `~/.ssh/id_ed25519_personal`.

2. **Generate SSH Key for Official Account**
   ssh-keygen -t ed25519 -C "nazmul@invento.com.bd"
    - Save the key with a custom name, e.g., `~/.ssh/id_ed25519_official`.

3. **Add Both Keys to the SSH Agent**
   eval "$(ssh-agent -s)"
   ssh-add ~/.ssh/id_ed25519_personal
   ssh-add ~/.ssh/id_ed25519_official
   

4. **Add the Public Keys to GitHub**
   - Copy each public key to your clipboard:
    cat ~/.ssh/id_ed25519_personal.pub
    cat ~/.ssh/id_ed25519_official.pub
        - Add them to their respective GitHub accounts under **Settings > SSH and GPG Keys**.

---

### **2. Configure SSH Config File**

Edit the `~/.ssh/config` file (create it if it doesn't exist):

```bash
# Personal Account
Host github-personal
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_personal

# Official Account
Host github-official
    HostName github.com
    User git
    IdentityFile ~/.ssh/id_ed25519_official
```

---

### **3. Clone Repositories Using the Correct Host**

1. For your personal account:
   ```bash
   git clone git@github-personal:username/repo.git
   ```

2. For your official account:
   ```bash
   git clone git@github-official:username/repo.git
   ```

---

### **4. Set Up Git Config for Each Repository**

Git allows you to configure user details per repository.

1. Navigate to a repository directory:
   ```bash
   cd /path/to/your/repository
   ```

2. Set the user details for that repository:
   - For personal repositories:
     ```bash
     git config user.name "Your Personal Name"
     git config user.email "your_personal_email@example.com"
     ```
   - For official repositories:
     ```bash
     git config user.name "Nazmul from Invento"
     git config user.email "nazmul@invento.com.bd"
     ```

---

### **5. Verify Configuration**

- Test the connection for each account:
  ```bash
  ssh -T git@github-personal
  ssh -T git@github-official
  ```

- Ensure you're using the correct credentials for commits in each repository:
  ```bash
  git config user.name
  git config user.email
  ```

---

Now you can seamlessly use both GitHub accounts on the same computer! Let me know if you need any further assistance.